**********************************************************************************
        Adding Custom variables of ANY format to the URL
********************************************************************
1. The updated Route.php 

2. The updated index.php

-----------------------------------------
1.The updated Router.php: 
-----------------------------------------

<?php

/**
 * Router
 *
 * PHP version 5.4
 */
class Router
{

    /**
     * Associative array of routes (the routing table)
     * @var array
     */
    protected $routes = [];

    /**
     * Parameters from the matched route
     * @var array
     */
    protected $params = [];

    /**
     * Add a route to the routing table
     *
     * @param string $route  The route URL
     * @param array  $params Parameters (controller, action, etc.)
     *
     * @return void
     */
    public function add($route, $params = [])
    {
        // Convert the route to a regular expression: escape forward slashes
        $route = preg_replace('/\//', '\\/', $route);

        // Convert variables e.g. {controller}
        $route = preg_replace('/\{([a-z]+)\}/', '(?P<\1>[a-z-]+)', $route);

        // Convert variables with custom regular expressions e.g. {id:\d+}
        $route = preg_replace('/\{([a-z]+):([^\}]+)\}/', '(?P<\1>\2)', $route);

        // Add start and end delimiters, and case insensitive flag
        $route = '/^' . $route . '$/i';

        $this->routes[$route] = $params;
    }

    /**
     * Get all the routes from the routing table
     *
     * @return array
     */
    public function getRoutes()
    {
        return $this->routes;
    }

    /**
     * Match the route to the routes in the routing table, setting the $params
     * property if a route is found.
     *
     * @param string $url The route URL
     *
     * @return boolean  true if a match found, false otherwise
     */
    public function match($url)
    {
        foreach ($this->routes as $route => $params) {
            if (preg_match($route, $url, $matches)) {
                foreach ($matches as $key => $match) {
                    if (is_string($key)) {
                        $params[$key] = $match;
                    }
                }

                $this->params = $params;
                return true;
            }
        }

        return false;
    }

    /**
     * Get the currently matched parameters
     *
     * @return array
     */
    public function getParams()
    {
        return $this->params;
    }
}

---------------------------------------------
    2.The updated index.php : Adding the custom variables of any format
-------------------------------------------

<?php

/**
 * Front controller
 *
 * PHP version 5.4
 */

/**
 * Routing
 */
require '../Core/Router.php';

$router = new Router();

// Add the routes
$router->add('', ['controller' => 'Home', 'action' => 'index']);
$router->add('posts', ['controller' => 'Posts', 'action' => 'index']);
$router->add('{controller}/{action}');
$router->add('{controller}/{id:\d+}/{action}');
    
// Display the routing table
echo '<pre>';
//var_dump($router->getRoutes());
echo htmlspecialchars(print_r($router->getRoutes(), true));
echo '</pre>';


// Match the requested route
$url = $_SERVER['QUERY_STRING'];


if ($router->match($url)) {
    echo '<pre>';
    var_dump($router->getParams());
    echo '</pre>';
} else {
    echo "No route found for URL '$url'";
}



At the moment I can add a route that matches several URL's with variables parts
of controller and action: 

                    org.nir/posts/index
                    org.nir/posts/new
                    org.nir/blog/index
                    org.nir/products/list


                    => $router.add('/{controller}/{action}')



I want to add other variables to the URL - like id (string of numbers)

                    org.nir/posts/123/edit

                    => $router.add('/{controller}/{id}/{action}/')

    Up to now: 

                preg_replace('/\{([a-z-]+)\}/', '(?P<\1>[a-z-]+)', $route)

    
    PROBLEM: WHY I DONT HAVE 2 CAPTURE GROUPS???

    NEXT..

==============================================================================

Custom Regular Expression:
    
    Define an OPTIONAL regular expression for the variable : (with :)

    $router->add('{controller}/{id:\d+}/{action})


    Where {controller} -> [a-z-]+

         {id:\d+} -> \d+

         {action} -> [a-z-]+


            

    Turning the route into a regular expression: 

        /{controller}/{id:\d+}/{action}

        => preg_replace('/\{([a-z-]+) :([^\}]+)  \}/', '(?P<\1\2)', $route);


    EXPLANATION:

        I use 2 captured groups: 

            -First group is for the variable name as before

            -Second is for the regular expression :  ([^[\}]+)

                => it will match to any string that starts 
                    with the '}'    ( of the {controller )  
                    and has
                

